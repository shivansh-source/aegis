{"ast":null,"code":"useEffect(() => {\n  console.log('Current config:', config); // Log current state\n\n  if (!config.countryA || !config.countryB) {\n    console.warn('Missing country codes!', {\n      countryA: config.countryA,\n      countryB: config.countryB\n    });\n    navigate('/');\n    return;\n  }\n  const loadData = async () => {\n    try {\n      setLoading(true);\n      console.log('Starting data fetch for:', config.countryA, config.countryB); // Add this\n\n      const [troopsA, weaponsA, troopsB, weaponsB] = await Promise.all([fetchTroops(config.countryA), fetchWeapons(config.countryA), fetchTroops(config.countryB), fetchWeapons(config.countryB)]);\n      console.log('Received data:', {\n        // Log the response\n        troopsA: troopsA.data,\n        weaponsA: weaponsA.data,\n        troopsB: troopsB.data,\n        weaponsB: weaponsB.data\n      });\n      setConfig(c => ({\n        ...c,\n        troopsA: troopsA.data,\n        weaponsA: weaponsA.data,\n        troopsB: troopsB.data,\n        weaponsB: weaponsB.data\n      }));\n    } catch (err) {\n      console.error('Data fetch failed:', err); // Enhanced error logging\n      setError('Failed to load military data');\n    } finally {\n      setLoading(false);\n    }\n  };\n  loadData();\n}, [config.countryA, config.countryB, setConfig, navigate]);","map":{"version":3,"names":["useEffect","console","log","config","countryA","countryB","warn","navigate","loadData","setLoading","troopsA","weaponsA","troopsB","weaponsB","Promise","all","fetchTroops","fetchWeapons","data","setConfig","c","err","error","setError"],"sources":["/Users/kausheyaroy/Downloads/ai-in-defense/client/src/pages/Simulation.tsx"],"sourcesContent":["useEffect(() => {\r\n  console.log('Current config:', config); // Log current state\r\n  \r\n  if (!config.countryA || !config.countryB) {\r\n    console.warn('Missing country codes!', { \r\n      countryA: config.countryA, \r\n      countryB: config.countryB \r\n    });\r\n    navigate('/');\r\n    return;\r\n  }\r\n\r\n  const loadData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      console.log('Starting data fetch for:', config.countryA, config.countryB); // Add this\r\n      \r\n      const [troopsA, weaponsA, troopsB, weaponsB] = await Promise.all([\r\n        fetchTroops(config.countryA),\r\n        fetchWeapons(config.countryA),\r\n        fetchTroops(config.countryB),\r\n        fetchWeapons(config.countryB)\r\n      ]);\r\n      \r\n      console.log('Received data:', { // Log the response\r\n        troopsA: troopsA.data,\r\n        weaponsA: weaponsA.data,\r\n        troopsB: troopsB.data,\r\n        weaponsB: weaponsB.data\r\n      });\r\n      \r\n      setConfig(c => ({\r\n        ...c,\r\n        troopsA: troopsA.data,\r\n        weaponsA: weaponsA.data,\r\n        troopsB: troopsB.data,\r\n        weaponsB: weaponsB.data\r\n      }));\r\n    } catch (err) {\r\n      console.error('Data fetch failed:', err); // Enhanced error logging\r\n      setError('Failed to load military data');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  loadData();\r\n}, [config.countryA, config.countryB, setConfig, navigate]);"],"mappings":"AAAAA,SAAS,CAAC,MAAM;EACdC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEC,MAAM,CAAC,CAAC,CAAC;;EAExC,IAAI,CAACA,MAAM,CAACC,QAAQ,IAAI,CAACD,MAAM,CAACE,QAAQ,EAAE;IACxCJ,OAAO,CAACK,IAAI,CAAC,wBAAwB,EAAE;MACrCF,QAAQ,EAAED,MAAM,CAACC,QAAQ;MACzBC,QAAQ,EAAEF,MAAM,CAACE;IACnB,CAAC,CAAC;IACFE,QAAQ,CAAC,GAAG,CAAC;IACb;EACF;EAEA,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;IAC3B,IAAI;MACFC,UAAU,CAAC,IAAI,CAAC;MAChBR,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEC,MAAM,CAACC,QAAQ,EAAED,MAAM,CAACE,QAAQ,CAAC,CAAC,CAAC;;MAE3E,MAAM,CAACK,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC/DC,WAAW,CAACb,MAAM,CAACC,QAAQ,CAAC,EAC5Ba,YAAY,CAACd,MAAM,CAACC,QAAQ,CAAC,EAC7BY,WAAW,CAACb,MAAM,CAACE,QAAQ,CAAC,EAC5BY,YAAY,CAACd,MAAM,CAACE,QAAQ,CAAC,CAC9B,CAAC;MAEFJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE;QAAE;QAC9BQ,OAAO,EAAEA,OAAO,CAACQ,IAAI;QACrBP,QAAQ,EAAEA,QAAQ,CAACO,IAAI;QACvBN,OAAO,EAAEA,OAAO,CAACM,IAAI;QACrBL,QAAQ,EAAEA,QAAQ,CAACK;MACrB,CAAC,CAAC;MAEFC,SAAS,CAACC,CAAC,KAAK;QACd,GAAGA,CAAC;QACJV,OAAO,EAAEA,OAAO,CAACQ,IAAI;QACrBP,QAAQ,EAAEA,QAAQ,CAACO,IAAI;QACvBN,OAAO,EAAEA,OAAO,CAACM,IAAI;QACrBL,QAAQ,EAAEA,QAAQ,CAACK;MACrB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZpB,OAAO,CAACqB,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC,CAAC,CAAC;MAC1CE,QAAQ,CAAC,8BAA8B,CAAC;IAC1C,CAAC,SAAS;MACRd,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAEDD,QAAQ,CAAC,CAAC;AACZ,CAAC,EAAE,CAACL,MAAM,CAACC,QAAQ,EAAED,MAAM,CAACE,QAAQ,EAAEc,SAAS,EAAEZ,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}